var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Platform, TouchableHighlight, TouchableNativeFeedback, TouchableOpacity, TouchableWithoutFeedback, } from 'react-native';
import Box, { getStyleSheetFromBoxProps } from './Box';
import useTheme from './useTheme';
export var Feedback;
(function (Feedback) {
    Feedback["Opacity"] = "opacity";
    Feedback["Highlight"] = "highlight";
    Feedback["None"] = "none";
})(Feedback || (Feedback = {}));
const Touchable = (_a) => {
    var { children, style } = _a, props = __rest(_a, ["children", "style"]);
    if (React.Children.count(children) > 1) {
        throw new Error('Touchable expects one single React element as children');
    }
    const theme = useTheme();
    if (props.native &&
        props.feedback !== Feedback.None &&
        Platform.OS === 'android') {
        return (React.createElement(TouchableNativeFeedback, Object.assign({}, props),
            React.createElement(Box, { style: [getStyleSheetFromBoxProps(props, theme).box, style] }, children)));
    }
    switch (props.feedback) {
        case Feedback.Highlight:
            return (React.createElement(TouchableHighlight, Object.assign({ style: [getStyleSheetFromBoxProps(props, theme).box, style] }, props), children));
        case Feedback.Opacity:
            return (React.createElement(TouchableOpacity, Object.assign({ style: [getStyleSheetFromBoxProps(props, theme).box, style] }, props), children));
        case Feedback.None:
            return (React.createElement(TouchableWithoutFeedback, Object.assign({}, props),
                React.createElement(Box, { style: [getStyleSheetFromBoxProps(props, theme).box, style] }, children)));
        default:
            throw new Error('Touchable expects a known feedback type');
    }
};
Touchable.defaultProps = {
    feedback: Feedback.Opacity,
    native: true,
};
export default Touchable;
